Refactored Todo

dummyHandler
	makeDummyTodo (todoIndex) -> newTodo
	makeDummyProject (numTodos, projIndex) -> newProject
	makeDummyProjectList (numProjects) -> newProjectList
{ makeDummyProjectList }

printContent 
	printProjects (userData)
	printTodos (project)
{ printProjetcs, printTodos }

displayContent
	resetPage () -> projectContainer
	makeProjectButton (project) -> projectButton
	displayProjects (userData) // fill out projectContainer
	resetTodo (projIndex) -> newTodoContainer
	makeTodoCard (projIndex, todo) -> todoCard
	makeAddNewTodoCard (projIndex) -> newTodoButton
	displayTodos (project) // fill out newTodoContainer
	resetData (indeces) -> dataContainer
	makeEditButton (indeces) -> modifyButton
	displayData (todo, indeces) // fill out dataContainer
{ displayProjects, displayTodos, displayData }

inputInformation
	resetPage () // removes todoContainer
	createModal () -> formContainer
	modalInput (text) -> inputContainer
	modalSubmitButton () -> submitButton
	createNewProject () // display new project modal
	createNewTodo () // dispay new todo modal
	modifyTodo (todoData) // display modify todo modal
{ craeteNewProject, createNewTodo, modifyTodo }

startProgram
	userData = []
	addDummyData () // userData = dummyDataHandler.makeDummyProjectList
	printUserProjects () // printContent.printProjects(userData)
	printProjectTodos (projIndex) // printContent.printTodos(userData[projIndex])
	displayUserProjects () // displayContent.displayProjects
	displayUserTodos (projIndex) // displayContent.displayTodos(userData[projIndex])
	displayUserData (indeces) // displayContent.displayData(userData[indeces[0].data[indeces[1]], indeces)
	newProjectModal // inputInformation.createNewProject
	newProject (newProject) // userData.push(newProject)
	newTodoModal () // inputInformation.createNewTodo
	newTodo (projIndex, newTodo) // userData[projIndex].data.push(newTodo)
	editTodoModal (indeces) // inputInformation.modifyTodo(userData[indeces[0]].data[indeces[1]]
	editTodo (indeces, newTodo) // userData[indeces[0]].data.splice(indeces[1], 1, newTodo)
	projectList () -> userData
{ <all> }

userInterface 
	user = startProgram()
	user.addDummyData
	
	removeModal
	removeModalWindow
	
	obtainTodoModalData (modalType, indexValue)
		.modal-input-field*4 -> newTodo
		removeModal()
		if new:
			user.newTodo(projIndex, newTodo)
			user.displayUserTodos(projIndex)
		if edit:
			user.editTodo(indeces, newTodo)
			user.displayuserTodos(indeces[0])
		.todo-card.eventListener(click, todoClickHandler))
	
	clickNewTodo(projIndex) 
		user.newTodoModal
		** closeModal.eventListener(click, removeModal)
		** window.eventListener(click, removeModalWindow)
		submitButton.eventListener(click, ontainTodoModalData('new', projIndex)
			
	clickNewProject
		user.newProjectModal
		** closeModal.eventListener(click, removeModal)
		** window.eventListener(click, removeModalWindow)
		inputField.eventListener(enter
			removeModal()
			.modal-input-field -> newProject
			user.newProject(newProject)
			refreshPage()
			
	projectClickHandler (e)
		e -> projIndex
		if new: 
			clickNewProject()
		if proj: 
			user.displayUserTodos
			.todo-card.eventListener(click, todoClickHandler)
			
	editClickHandler (e)
		e -> indeces
		user.editTodoModal(indeces)
		** closeModal.eventListener(click, removeModal)
		** window.eventListener(click, removeModalWindow)
		submitButton.eventListener(click, obtainTodoModalData('edit', indeces)
			
	todoClickHandler (e)
		e -> indeces
		if new:
			clickNewTodo(indeces[0])
		if todo:
			user.displayUserData(indeces)
			.todo-edit-button.eventListener(click, editClickHandler)
	
	refreshPage()
		user.displayUserProjects
		.project-button.eventListener(click, projectClickHandler)
		
	refreshPage()
	
userInterface()


		